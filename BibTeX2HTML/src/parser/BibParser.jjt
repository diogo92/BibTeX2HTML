/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;
  IGNORE_CASE = true;
  UNICODE_INPUT = true;
  lookahead = 2;}PARSER_BEGIN(BibParser)package parser;

import java.util.Vector;
import java.util.Scanner;

import data.*;
import reader.FileReader;

public class BibParser{
  public static Vector< BibData > data;
  public static void main(String args [])  {	start(args);
  }  public static void start(String args [])  {    System.out.println("File to be parsed:");    System.out.print(">> ");
    Scanner sc = new Scanner(System.in);
    String file = sc.nextLine();
        try    {
      new BibParser(FileReader.getFile(file));      SimpleNode n = BibParser.Start();      n.dump(">>  ");    }    catch (Exception e)    {      System.out.println("Error: " + e.getMessage());    }
    sc.close();  }}PARSER_END(BibParser)SKIP :{  " "| "\t"| "\r"
| "\n"}
TOKEN :{
  < ARROBA : "@" >
| < BRACKET_START : "{" >
| < BRACKET_END : "}" >
| < COMMA : "," >
| < EQUAL : "=" >
| < DOUBLE_MARKS :"\"" >
| < SINGLE_MARKS :"'" >
| < STRING : "STRING" >
| < ARTICLE : "ARTICLE" >
| < BOOK : "BOOK" >
| < BOOKLET : "BOOKLET" >
| < CONFERENCE : "CONFERENCE" >
| < INBOOK : "INBOOK" >
| < INCOLLECTION : "INCOLLECTION" >
| < INPROCEEDINGS : "INPROCEEDINGS" >
| < MANUAL : "MANUAL" >
| < MASTERTHESIS : "MASTERTHESIS" >
| < MISC : "MISC" >
| < PHDTHESIS : "PHDTHESIS" >
| < PROCEEDINGS : "PROCEEDINGS" >
| < TECHREPORT : "TECHREPORT" >
| < UNPUBLISHED : "UNPUBLISHED" >
| < AUTHOR : "AUTHOR" >
| < ANNOTE : "ANNOTE" >
| < BOOKTITLE : "BOOKTITLE" >
| < CHAPTER : "CHAPTER" >
| < CROSSREF : "CROSSREF" >
| < EDITOR : "EDITOR" >
| < INSTITUTION : "INSTITUTION" >
| < ORGANIZATION : "ORGANIZATION" >
| < SCHOOL : "SCHOOL" >
| < JOURNAL : "JOURNAL" >
| < TITLE : "TITLE" >
| < YEAR : "YEAR" >
| < VOLUME : "VOLUME" >
| < NUMBER : "NUMBER" >
| < ADDRESS : "ADDRESS" >
| < HOWPUBLISHED : "HOWPUBLISHED" >
| < PUBLISHER : "PUBLISHER" >
| < SERIES : "SERIES" >
| < EDITION: "EDITION" >
| < PAGES : "PAGES" >
| < PAGES_V : "\""< INTEGER > ("-"|"--") < INTEGER >"\"" >
| < MONTH : "MONTH" >
| < NOTE : "NOTE" >
| < KEY : "KEY" >
| < REP_TYPE : "REP_TYPE" >
| < INTEGER : < DIGIT >(< DIGIT >)* >
| < #DIGIT : ["0"-"9"] >
| < QUOTED_TEXT : < DOUBLE_MARKS > (< INTEGER > | < LETTER > | < SPECIAL > | "\\" (< SINGLE_MARKS >| < DOUBLE_MARKS >) | < SINGLE_MARKS >)*< DOUBLE_MARKS > | < SINGLE_MARKS >(< INTEGER > | < LETTER > | < SPECIAL > | "\\" (< SINGLE_MARKS >| < DOUBLE_MARKS >)| < DOUBLE_MARKS >)*< SINGLE_MARKS > > 
| < WORD : < LETTER >(< LETTER > | < INTEGER >)* >
| < TEXT : (< LETTER > | < INTEGER >)+ >
| < #SPECIAL : ["\r","\n","\u0020"-"\u0021","\u0023"-"\u0026","\u0028"-"\u002f",
				"\u003a"-"\u0040" ,"\u005b"-"\u0060","\u0020"-"\u0021","\u007b"-"\u007e"
				] >
| < #LETTER : ["\u0041"-"\u007A" ] >
}SimpleNode Start() :{
}{  (    Arroba() Type() < BRACKET_START > Data() < BRACKET_END >
  )*  {    return jjtThis;  }}

void Arroba() :
{}
{	< ARROBA >
}

void Data() :
{}
{
  Key() (Attribute() (< COMMA > Attribute() )*)? }

void Key() :
{
  Token key = null;}
{	(key = < WORD > < COMMA >)?

	{
	  if(key == null)
	  {		System.out.println("Empty key");
	  }
	}}

void Equal() :{}
{
  < EQUAL >}

void Type() :
{
	Token value;
}
{
	< WORD > | < TEXT > | < CONFERENCE > | < ARTICLE > | < BOOK >
	| < BOOKLET > | < INBOOK > | < INCOLLECTION > | < PAGES >
	| < INPROCEEDINGS > | < MANUAL > | < MASTERTHESIS > | < MISC >
	| < PHDTHESIS > | < PROCEEDINGS > | < TECHREPORT > | < UNPUBLISHED >
	| < AUTHOR > | < ANNOTE > | < BOOKTITLE > | < CHAPTER >
	| < CROSSREF > | < EDITOR > | < INSTITUTION > | < ORGANIZATION >
	| < SCHOOL > | < JOURNAL > | < TITLE > | < YEAR > | < VOLUME >
	| < NUMBER > | < ADDRESS > | < HOWPUBLISHED > | < PUBLISHER >
	| < SERIES > | < EDITION > | < NOTE > | < MONTH >
}

void Value() :
{}{
  < WORD > | < QUOTED_TEXT > | < INTEGER > | < PAGES_V >}
void Attribute():
{
}
{
  (
  		Type() Equal() Value()
  )
}
