/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;
  IGNORE_CASE = true;
  UNICODE_INPUT = true;}PARSER_BEGIN(BibParser)package parser;

import java.util.Vector;
import java.util.Scanner;

import data.*;
import reader.FileReader;

public class BibParser{
  public static Vector< BibData > data;
  public static void main(String args [])  {	start(args);
  }  public static void start(String args [])  {    System.out.println("File to be parsed:");    System.out.print(">> ");
    Scanner sc = new Scanner(System.in);
    String file = sc.nextLine();
        try    {
      new BibParser(FileReader.getFile(file));      SimpleNode n = BibParser.Start();      n.dump(">>  ");    }    catch (Exception e)    {      System.out.println("Error: " + e.getMessage());    }
    sc.close();  }}PARSER_END(BibParser)SKIP :{  " "| "\t"| "\r"
| "\n"}
TOKEN :{
  < ARROBA : "@" >
| < BRACKET_START : "{" >
| < BRACKET_END : "}" >
| < COMMA : "," >
| < EQUAL : "=" >
| < STRING : "STRING" >
| < ARTICLE : "ARTICLE" >
| < BOOK : "BOOK" >
| < BOOKLET : "BOOKLET" >
| < CONFERENCE : "CONFERENCE" >
| < INBOOK : "INBOOK" >
| < INCOLLECTION : "INCOLLECTION" >
| < INPROCEEDINGS : "INPROCEEDINGS" >
| < MANUAL : "MANUAL" >
| < MASTERTHESIS : "MASTERTHESIS" >
| < MISC : "MISC" >
| < PHDTHESIS : "PHDTHESIS" >
| < PROCEEDINGS : "PROCEEDINGS" >
| < TECHREPORT : "TECHREPORT" >
| < UNPUBLISHED : "UNPUBLISHED" >
| < AUTHOR : "AUTHOR" >
| < ANNOTE : "ANNOTE" >
| < BOOKTITLE : "BOOKTITLE" >
| < CHAPTER : "CHAPTER" >
| < CROSSREF : "CROSSREF" >
| < EDITOR : "EDITOR" >
| < INSTITUTION : "INSTITUTION" >
| < ORGANIZATION : "ORGANIZATION" >
| < SCHOOL : "SCHOOL" >
| < JOURNAL : "JOURNAL" >
| < TITLE : "TITLE" >
| < YEAR : "YEAR" >
| < VOLUME : "VOLUME" >
| < NUMBER : "NUMBER" >
| < ADDRESS : "ADDRESS" >
| < HOWPUBLISHED : "HOWPUBLISHED" >
| < PUBLISHER : "PUBLISHER" >
| < SERIES : "SERIES" >
| < EDITION: "EDITION" >
| < PAGES : "PAGES" >
| < PAGES_V : "\""< INTEGER > "-" < INTEGER >"\"" | "\""< INTEGER > "--" < INTEGER >"\"" >
| < MONTH : "MONTH" >
| < NOTE : "NOTE" >
| < KEY : "KEY" >
| < REP_TYPE : "REP_TYPE" >
| < INTEGER : < DIGIT >(< DIGIT >)* >
| < #DIGIT : ["0"-"9"] >
| < QUOTED_TEXT : "\""(< SPECIAL >| "\\\"" | " " | < WORD > (","|"\\"|"'"|"\'")?)+"\"" | "'"("." | "\r" | "\n" | "{" | "}" | "\\\'" | "\""" | " | < WORD > (","|"\\"|"'"|"\'")?)+"'" > 
| < WORD : < LETTER >(< LETTER > | < INTEGER >)* >
| < #SPECIAL : ["\r","\n","\u0020"-"\u0021","\u0023"-"\u0026","\u0028"-"\u002f",
				"\u003a"-"\u0040" ,"\u005b"-"\u0060","\u0020"-"\u0021","\u007b"-"\u007e"
				] >
| < #LETTER : ["\u0041"-"\u007A" ] >
}SimpleNode Start() :{}{  (< ARROBA > Command())+ < EOF >  {    return jjtThis;  }}void Command() :{
  Token t = getNextToken();
  Token key;
}{
  < BRACKET_START > ( key = < WORD > < COMMA >)?
  { 
    try    {
            switch(t.kind){
              case BibParserConstants.ARTICLE:
			  	ArticleData();
			  	break;
			  case BibParserConstants.BOOK:
				BookData();
				break;
			  case BibParserConstants.BOOKLET:
			  	BookletData();
			  	break;
			  case BibParserConstants.CONFERENCE:
			  	ConferenceData();
			  	break;
			  case BibParserConstants.INBOOK:
			  	InbookData();
			  	break;
			  case BibParserConstants.INCOLLECTION:
			  	IncollectionData();
			  	break;
			  case BibParserConstants.INPROCEEDINGS:
			  	InproceedingsData();
			  	break;
			  case BibParserConstants.MANUAL:
			  	ManualData();
			  	break;
			  case BibParserConstants.MASTERTHESIS:
			  	MastersthesisData();
			  	break;
			  case BibParserConstants.MISC:
			  	MiscData();
			  	break;
			  case BibParserConstants.PHDTHESIS:
			  	PhdthesisData();
			  	break;
			  case BibParserConstants.PROCEEDINGS:
			  	ProceedingsData();
			  	break;
			  case BibParserConstants.TECHREPORT:
			  	TechreportData();
			  	break;
			  case BibParserConstants.UNPUBLISHED:
			  	UnpublishedData();
			  	break;
			  default:
			  	throw new TokenException("Not expecting token " + t);
			    break;
		}
	}
	catch(Exception e)
    {
      System.out.println("Error: " + e.getMessage());
    }
  }
  < BRACKET_END >
}



void ArticleData() :
{}
{
  (
    Attribute(BibParserConstants.ARTICLE)
    (		< COMMA > Attribute(BibParserConstants.ARTICLE)
    )*
  )?
}

void BookData() :
{}
{
  (
    Attribute(BibParserConstants.BOOK)
    (
		< COMMA > Attribute(BibParserConstants.BOOK)
    )*
  )?
}

void BookletData() :
{}
{
  (
    Attribute(BibParserConstants.BOOKLET)
    (
		< COMMA > Attribute(BibParserConstants.BOOKLET)
    )*
  )?
}

void ConferenceData() :
{}
{
  (
    Attribute(BibParserConstants.CONFERENCE)
    (
		< COMMA > Attribute(BibParserConstants.CONFERENCE)
    )*
  )?
}

void InbookData() :
{}
{
  (
    Attribute(BibParserConstants.INBOOK)
    (
		< COMMA > Attribute(BibParserConstants.INBOOK)
    )*
  )?
}

void IncollectionData() :
{}
{
  (
    Attribute(BibParserConstants.INCOLLECTION)
    (
		< COMMA > Attribute(BibParserConstants.INCOLLECTION)
    )*
  )?
}

void InproceedingsData() :
{}
{
  (
    Attribute(BibParserConstants.INPROCEEDINGS)
    (
		< COMMA > Attribute(BibParserConstants.INPROCEEDINGS)
    )*
  )?
}

void ManualData() :
{}
{
  (
    Attribute(BibParserConstants.MANUAL)
    (
		< COMMA > Attribute(BibParserConstants.MANUAL)
    )*
  )?
}

void MastersthesisData() :
{}
{
  (
    Attribute(BibParserConstants.MASTERTHESIS)
    (
		< COMMA > Attribute(BibParserConstants.MASTERTHESIS)
    )*
  )?
}

void MiscData() :
{}
{
  (
    Attribute(BibParserConstants.MISC)
    (
		< COMMA > Attribute(BibParserConstants.MISC)
    )*
  )?
}

void PhdthesisData() :
{}
{
  (
    Attribute(BibParserConstants.PHDTHESIS)
    (
		< COMMA > Attribute(BibParserConstants.PHDTHESIS)
    )*
  )?
}

void ProceedingsData() :
{}
{
  (
    Attribute(BibParserConstants.PROCEEDINGS)
    (
		< COMMA > Attribute(BibParserConstants.PROCEEDINGS)
    )*
  )?
}

void TechreportData() :
{}
{
  (
    Attribute(BibParserConstants.TECHREPORT)
    (
		< COMMA > Attribute(BibParserConstants.TECHREPORT)
    )*
  )?
}

void UnpublishedData() :
{}
{
  (
    Attribute(BibParserConstants.UNPUBLISHED)
    (
		< COMMA > Attribute(BibParserConstants.UNPUBLISHED)
    )*
  )?
}

void Attribute(int kind):
{
  Token field;
  Token value;
}
{
  (
  		field = < WORD > < EQUAL > (value = < WORD >| value = < QUOTED_TEXT >)
 	|	field = < AUTHOR > < EQUAL > (value = < WORD >| value = < QUOTED_TEXT >)
 	|	field = < TITLE > < EQUAL > (value = < WORD >| value = < QUOTED_TEXT >)
 	|	field = < JOURNAL > < EQUAL > (value = < WORD >| value = < QUOTED_TEXT >) 
 	|	field = < YEAR > < EQUAL > (value = < INTEGER >) 
 	|	field = < VOLUME > < EQUAL > (value = < INTEGER >) 
 	|	field = < NUMBER > < EQUAL > (value = < INTEGER >) 
 	|	field = < PAGES > < EQUAL > (value = < PAGES_V >)
 	|	field = < MONTH > < EQUAL > (value = < QUOTED_TEXT >)  
 	|	field = < NOTE > < EQUAL > (value = < QUOTED_TEXT >)  
 	|	field = < KEY > < EQUAL > (value = < QUOTED_TEXT >)  
 	|	field = < PUBLISHER > < EQUAL > (value = < QUOTED_TEXT >)
 	|	field = < SERIES > < EQUAL > (value = < QUOTED_TEXT >)
 	|	field = < ADDRESS > < EQUAL > (value = < QUOTED_TEXT >)
 	|	field = < EDITION > < EQUAL > (value = < QUOTED_TEXT >)
 	| 	field = < BOOKTITLE > < EQUAL > (value = < QUOTED_TEXT >)
 	|	field = < CHAPTER > < EQUAL > (value = < INTEGER >)
 	|   field = < CROSSREF > < EQUAL > (value = < WORD >)
 	|   field = < EDITOR > < EQUAL > (value = < QUOTED_TEXT >)
 	|   field = < INSTITUTION > < EQUAL > (value = < QUOTED_TEXT >)
 	|   field = < ORGANIZATION > < EQUAL > (value = < QUOTED_TEXT >)
 	|   field = < SCHOOL > < EQUAL > (value = < QUOTED_TEXT >)
 	|   field = < HOWPUBLISHED > < EQUAL > (value = < QUOTED_TEXT >)
  )
  {
    try
    {		switch(kind)
		{
			case BibParserConstants.ARTICLE:
				switch(field.kind)
				{
					case BibParserConstants.AUTHOR:
					case BibParserConstants.TITLE:
					case BibParserConstants.JOURNAL:
					case BibParserConstants.YEAR:
					case BibParserConstants.VOLUME:
					case BibParserConstants.NUMBER:
					case BibParserConstants.PAGES:
					case BibParserConstants.MONTH:
					case BibParserConstants.NOTE:
					case BibParserConstants.KEY:
						break;
					default:
						throw new SintaxException("Field " + field.image + " not expected: line " + field.beginLine + ", column " + field.beginColumn);
						break;
				}
				break;
			case BibParserConstants.BOOK:
				switch(field.kind)
				{
					case BibParserConstants.AUTHOR:
					case BibParserConstants.TITLE:
					case BibParserConstants.PUBLISHER:
					case BibParserConstants.YEAR:
					case BibParserConstants.VOLUME:
					case BibParserConstants.NUMBER:
					case BibParserConstants.SERIES:
					case BibParserConstants.ADDRESS:
					case BibParserConstants.EDITION:
					case BibParserConstants.MONTH:
					case BibParserConstants.NOTE:
					case BibParserConstants.KEY:
						break;
					default:
						throw new SintaxException("Field " + field.image + " not expected: line " + field.beginLine + ", column " + field.beginColumn);
						break;
				}
				break;
			case BibParserConstants.BOOKLET:
				switch(field.kind)
				{
					case BibParserConstants.AUTHOR:
					case BibParserConstants.TITLE:
					case BibParserConstants.HOWPUBLISHED:
					case BibParserConstants.YEAR:
					case BibParserConstants.ADDRESS:
					case BibParserConstants.MONTH:
					case BibParserConstants.NOTE:
					case BibParserConstants.KEY:
						break;
					default:
						throw new SintaxException("Field " + field.image + " not expected: line " + field.beginLine + ", column " + field.beginColumn);
						break;
				}
				break;
			case BibParserConstants.CONFERENCE:
				switch(field.kind)
				{
					case BibParserConstants.AUTHOR:
					case BibParserConstants.BOOKTITLE:
					case BibParserConstants.TITLE:
					case BibParserConstants.EDITOR:
					case BibParserConstants.PUBLISHER:
					case BibParserConstants.YEAR:
					case BibParserConstants.VOLUME:
					case BibParserConstants.NUMBER:
					case BibParserConstants.SERIES:
					case BibParserConstants.PAGES:
					case BibParserConstants.ADDRESS:
					case BibParserConstants.EDITION:
					case BibParserConstants.MONTH:
					case BibParserConstants.NOTE:
					case BibParserConstants.KEY:
						break;
					case BibParserConstants.ORGANIZATION:
						break;
					default:
						throw new SintaxException("Field " + field.image + " not expected: line " + field.beginLine + ", column " + field.beginColumn);
						break;
				}
				break;
			case BibParserConstants.INBOOK:
				switch(field.kind)
				{
					case BibParserConstants.AUTHOR:
					case BibParserConstants.TITLE:
					case BibParserConstants.PUBLISHER:
					case BibParserConstants.CHAPTER:
					case BibParserConstants.PAGES:
					case BibParserConstants.YEAR:
					case BibParserConstants.VOLUME:
					case BibParserConstants.REP_TYPE:
					case BibParserConstants.SERIES:
					case BibParserConstants.ADDRESS:
					case BibParserConstants.EDITION:
					case BibParserConstants.MONTH:
					case BibParserConstants.NOTE:
					case BibParserConstants.KEY:
						break;
					default:
						throw new SintaxException("Field " + field.image + " not expected: line " + field.beginLine + ", column " + field.beginColumn);
						break;
				}
				break;
			case BibParserConstants.INCOLLECTION:
				switch(field.kind)
				{
					case BibParserConstants.AUTHOR:
					case BibParserConstants.TITLE:
					case BibParserConstants.BOOKTITLE:
					case BibParserConstants.PUBLISHER:
					case BibParserConstants.YEAR:
					case BibParserConstants.VOLUME:
					case BibParserConstants.SERIES:
					case BibParserConstants.REP_TYPE:
					case BibParserConstants.CHAPTER:
					case BibParserConstants.PAGES:
					case BibParserConstants.ADDRESS:
					case BibParserConstants.EDITION:
					case BibParserConstants.EDITOR:
					case BibParserConstants.MONTH:
					case BibParserConstants.NOTE:
					case BibParserConstants.KEY:
						break;
					default:
						throw new SintaxException("Field " + field.image + " not expected: line " + field.beginLine + ", column " + field.beginColumn);
						break;
				}
				break;
			case BibParserConstants.INPROCEEDINGS:
				switch(field.kind)
				{
					case BibParserConstants.AUTHOR:
					case BibParserConstants.TITLE:
					case BibParserConstants.BOOKTITLE:
					case BibParserConstants.PUBLISHER:
					case BibParserConstants.YEAR:
					case BibParserConstants.VOLUME:
					case BibParserConstants.NUMBER:
					case BibParserConstants.SERIES:
					case BibParserConstants.ORGANIZATION:
					case BibParserConstants.PAGES:
					case BibParserConstants.ADDRESS:
					case BibParserConstants.EDITOR:
					case BibParserConstants.MONTH:
					case BibParserConstants.NOTE:
					case BibParserConstants.KEY:
						break;
					default:
						throw new SintaxException("Field " + field.image + " not expected: line " + field.beginLine + ", column " + field.beginColumn);
						break;
				}
				break;
			case BibParserConstants.MANUAL:
				switch(field.kind)
				{
					case BibParserConstants.AUTHOR:
					case BibParserConstants.TITLE:
					case BibParserConstants.YEAR:
					case BibParserConstants.ORGANIZATION:
					case BibParserConstants.ADDRESS:
					case BibParserConstants.EDITION:
					case BibParserConstants.MONTH:
					case BibParserConstants.NOTE:
					case BibParserConstants.KEY:
						break;
					default:
						throw new SintaxException("Field " + field.image + " not expected: line " + field.beginLine + ", column " + field.beginColumn);
						break;
				}
				break;
			case BibParserConstants.MASTERTHESIS:
				switch(field.kind)
				{
					case BibParserConstants.AUTHOR:
					case BibParserConstants.TITLE:
					case BibParserConstants.SCHOOL:
					case BibParserConstants.YEAR:
					case BibParserConstants.REP_TYPE:
					case BibParserConstants.ADDRESS:
					case BibParserConstants.MONTH:
					case BibParserConstants.NOTE:
					case BibParserConstants.KEY:
						break;
					default:
						throw new SintaxException("Field " + field.image + " not expected: line " + field.beginLine + ", column " + field.beginColumn);
						break;
				}
				break;
			case BibParserConstants.MISC:
				switch(field.kind)
				{
					case BibParserConstants.AUTHOR:
					case BibParserConstants.TITLE:
					case BibParserConstants.HOWPUBLISHED:
					case BibParserConstants.YEAR:
					case BibParserConstants.MONTH:
					case BibParserConstants.NOTE:
					case BibParserConstants.KEY:
						break;
					default:
						throw new SintaxException("Field " + field.image + " not expected: line " + field.beginLine + ", column " + field.beginColumn);
						break;
				}
				break;
			case BibParserConstants.PHDTHESIS:
				switch(field.kind)
				{
					case BibParserConstants.AUTHOR:
					case BibParserConstants.TITLE:
					case BibParserConstants.SCHOOL:
					case BibParserConstants.YEAR:
					case BibParserConstants.REP_TYPE:
					case BibParserConstants.ADDRESS:
					case BibParserConstants.MONTH:
					case BibParserConstants.NOTE:
					case BibParserConstants.KEY:
						break;
					default:
						throw new SintaxException("Field " + field.image + " not expected: line " + field.beginLine + ", column " + field.beginColumn);
						break;
				}
				break;
			case BibParserConstants.PROCEEDINGS:
				switch(field.kind)
				{
					case BibParserConstants.TITLE:
					case BibParserConstants.PUBLISHER:
					case BibParserConstants.YEAR:
					case BibParserConstants.EDITOR:
					case BibParserConstants.VOLUME:
					case BibParserConstants.NUMBER:
					case BibParserConstants.SERIES:
					case BibParserConstants.PAGES:
					case BibParserConstants.ADDRESS:
					case BibParserConstants.ORGANIZATION:
					case BibParserConstants.MONTH:
					case BibParserConstants.NOTE:
					case BibParserConstants.KEY:
						break;
					default:
						throw new SintaxException("Field " + field.image + " not expected: line " + field.beginLine + ", column " + field.beginColumn);
						break;
				}
				break;
			case BibParserConstants.TECHREPORT:
				switch(field.kind)
				{
					case BibParserConstants.TITLE:
					case BibParserConstants.AUTHOR:
					case BibParserConstants.YEAR:
					case BibParserConstants.INSTITUTION:
					case BibParserConstants.REP_TYPE:
					case BibParserConstants.NUMBER:
					case BibParserConstants.ADDRESS:
					case BibParserConstants.MONTH:
					case BibParserConstants.NOTE:
					case BibParserConstants.KEY:
						break;
					default:
						throw new SintaxException("Field " + field.image + " not expected: line " + field.beginLine + ", column " + field.beginColumn);
						break;
				}
				break;
			case BibParserConstants.UNPUBLISHED:
				switch(field.kind)
				{
					case BibParserConstants.TITLE:
					case BibParserConstants.AUTHOR:
					case BibParserConstants.YEAR:
					case BibParserConstants.MONTH:
					case BibParserConstants.NOTE:
					case BibParserConstants.KEY:
						break;
					default:
						throw new SintaxException("Field " + field.image + " not expected: line " + field.beginLine + ", column " + field.beginColumn);
						break;
				}
				break;
			default:
				break;
		}
    }
    catch(SintaxException e)    {	  System.out.println(e.toString());
    } 	
  }
}
