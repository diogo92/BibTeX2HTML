/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;
  IGNORE_CASE = true;
  UNICODE_INPUT = true;
  lookahead = 2;}PARSER_BEGIN(BibParser)package parser;

import java.util.Vector;
import java.util.Scanner;

import java.util.Enumeration;
import java.util.Hashtable;

import data.*;
import reader.FileReader;

public class BibParser{
  public static Hashtable symbtab = new Hashtable();
  public static Vector< BibData > data;
  public static Vector< Vector <Object > > tree;
  public static int currIndex = 0;
  public static void main(String args [])  {	start(args);
  }  public static void start(String args [])  {
    tree = new Vector< Vector <Object > >();
    String temp;
    SymbolTable temp2;    System.out.println("File to be parsed:");    System.out.print(">> ");
    Scanner sc = new Scanner(System.in);
    String file = sc.nextLine();
        try    {
      new BibParser(FileReader.getFile(file));
      SimpleNode n = BibParser.Start();      n.dump(">>  ");
      BibParser.CheckTree(n);
      BibParser.CheckSemantic();
      Enumeration t = symbtab.keys();

      while (t.hasMoreElements() == true)      {
        temp = (String)t.nextElement();
        temp2 = (SymbolTable)symbtab.get(temp);
     //   System.out.println(temp);
     /*   if(temp2.type != null)
        	System.out.println(" type = " + temp2.type);
        if(temp2.value != null)
        	System.out.println(" value = " + temp2.value);*/

      }    }    catch (Exception e)    {      System.out.println("Error: " + e.getMessage());    }
    sc.close();  }

  }PARSER_END(BibParser)SKIP :{  " "| "\t"| "\r"
| "\n"}
TOKEN :{
  < ARROBA : "@" >
| < BRACKET_START : "{" >
| < BRACKET_END : "}" >
| < COMMA : "," >
| < EQUAL : "=" >
| < DOUBLE_MARKS :"\"" >
| < SINGLE_MARKS :"'" >
| < STRING : "STRING" >
| < ARTICLE : "ARTICLE" >
| < BOOK : "BOOK" >
| < BOOKLET : "BOOKLET" >
| < CONFERENCE : "CONFERENCE" >
| < INBOOK : "INBOOK" >
| < INCOLLECTION : "INCOLLECTION" >
| < INPROCEEDINGS : "INPROCEEDINGS" >
| < MANUAL : "MANUAL" >
| < MASTERTHESIS : "MASTERTHESIS" >
| < MISC : "MISC" >
| < PHDTHESIS : "PHDTHESIS" >
| < PROCEEDINGS : "PROCEEDINGS" >
| < TECHREPORT : "TECHREPORT" >
| < UNPUBLISHED : "UNPUBLISHED" >
| < AUTHOR : "AUTHOR" >
| < ANNOTE : "ANNOTE" >
| < BOOKTITLE : "BOOKTITLE" >
| < CHAPTER : "CHAPTER" >
| < CROSSREF : "CROSSREF" >
| < EDITOR : "EDITOR" >
| < INSTITUTION : "INSTITUTION" >
| < ORGANIZATION : "ORGANIZATION" >
| < SCHOOL : "SCHOOL" >
| < JOURNAL : "JOURNAL" >
| < TITLE : "TITLE" >
| < YEAR : "YEAR" >
| < VOLUME : "VOLUME" >
| < NUMBER : "NUMBER" >
| < ADDRESS : "ADDRESS" >
| < HOWPUBLISHED : "HOWPUBLISHED" >
| < PUBLISHER : "PUBLISHER" >
| < SERIES : "SERIES" >
| < EDITION: "EDITION" >
| < PAGES : "PAGES" >
| < PAGES_V : "\""< INTEGER > ("-"|"--") < INTEGER >"\"" >
| < MONTH : "MONTH" >
| < NOTE : "NOTE" >
| < KEY : "KEY" >
| < REP_TYPE : "REP_TYPE" >
| < INTEGER : < DIGIT >(< DIGIT >)* >
| < #DIGIT : ["0"-"9"] >
| < QUOTED_TEXT : < DOUBLE_MARKS > (< INTEGER > | < LETTER > | < SPECIAL > | "\\" (< SINGLE_MARKS >| < DOUBLE_MARKS >) | < SINGLE_MARKS >)*< DOUBLE_MARKS > | < SINGLE_MARKS >(< INTEGER > | < LETTER > | < SPECIAL > | "\\" (< SINGLE_MARKS >| < DOUBLE_MARKS >)| < DOUBLE_MARKS >)*< SINGLE_MARKS > > 
| < WORD : < LETTER >(< LETTER > | < INTEGER >)* >
| < TEXT : (< LETTER > | < INTEGER >)+ >
| < #SPECIAL : ["\r","\n","\u0020"-"\u0021","\u0023"-"\u0026","\u0028"-"\u002f",
				"\u003a"-"\u0040" ,"\u005b"-"\u0060","\u0020"-"\u0021","\u007b"-"\u007e"
				] >
| < #LETTER : ["\u0041"-"\u007A" ] >
}SimpleNode Start() :{
}{  (    Arroba() Type() < BRACKET_START > Data() < BRACKET_END >
  )*  {    return jjtThis;  }}

void Arroba() :
{}
{	< ARROBA >
}

void Data() :
{}
{
  Key() (Attribute() (< COMMA > Attribute() )*)? }

void Key() :
{
  Token key = null;}
{	(key = < WORD > < COMMA >)?

	{
	  if(key == null)
	  {		System.out.println("Empty key");
	  }
	}}

void Equal() :{}
{
  < EQUAL >}

void Type() :
{
	Token value;
}
{
	(value=< WORD >		{		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("WORD",value.image));
		}
	) | (value=< TEXT >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("TEXT",value.image));
		}
	) | (value=< CONFERENCE >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("CONFERENCE",value.image));
		}
	) | (value=< ARTICLE >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("ARTICLE",value.image));
		}
	) | (value=< BOOK >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("BOOK",value.image));
		}
	)
	| (value=< BOOKLET >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("BOOKLET",value.image));
		}
	) | (value=< INBOOK >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("INBOOK",value.image));
		}
	) | (value=< INCOLLECTION >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("INCOLLECTION",value.image));
		}
	)
	| (value=< INPROCEEDINGS >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("INPROCEEDINGS",value.image));
		}
	) | (value=< MANUAL >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("MANUAL",value.image));
		}
	) | (value=< MASTERTHESIS >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("MASTERSTHESIS",value.image));
		}
	) | (value=< MISC >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("MISC",value.image));
		}
	)
	| (value=< PHDTHESIS >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("PHDTHESIS",value.image));
		}
	)| (value=< PROCEEDINGS >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("PROCEEDINGS",value.image));
		}
	) | (value=< TECHREPORT >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("TECHREPORT",value.image));
		}
	) | (value=< UNPUBLISHED >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("UNPUBLISHED",value.image));
		}
	)
}

void Field():
{
  Token value;
}
{	(value=< AUTHOR >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("AUTHOR",value.image));
		}
	) | (value=< ANNOTE >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("ANNOTE",value.image));
		}
	) | (value=< BOOKTITLE >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("BOOKTITLE",value.image));
		}
	) | (value=< CHAPTER >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("CHAPTER",value.image));
		}
	)
	| (value=< CROSSREF >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("CROSSREF",value.image));
		}
	) | (value=< EDITOR >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("EDITOR",value.image));
		}
	) | (value=< INSTITUTION >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("INSTITUTION",value.image));
		}
	) | (value=< ORGANIZATION >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("ORGANIZATION",value.image));
		}
	)
	|(value=< SCHOOL >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("SCHOOL",value.image));
		}
	)| (value=< JOURNAL >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("JOURNAL",value.image));
		}
	) | (value=< TITLE >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("TITLE",value.image));
		}
	) | (value=< YEAR >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("YEAR",value.image));
		}
	) | (value=< VOLUME >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("VOLUME",value.image));
		}
	)
	| (value=< NUMBER >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("NUMBER",value.image));
		}
	) | (value=< ADDRESS >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("ADDRESS",value.image));
		}
	) | (value=< HOWPUBLISHED >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("HOWPUBLISHED",value.image));
		}
	) | (value=< PUBLISHER >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("PUBLISHER",value.image));
		}
	)
	| (value=< SERIES >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("SERIES",value.image));
		}
	) | (value=< EDITION >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("EDITION",value.image));
		}
	) | (value=< NOTE >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("NOTE",value.image));
		}
	) | (value=< MONTH >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("MONTH",value.image));
		}
	) | (value=< PAGES >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("PAGES",value.image));
		}
	)
}
void Value() :
{
  Token value;}{
  (value=< WORD >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("WORD",value.image));
		}
	) | (value=< QUOTED_TEXT >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("QUOTED_TEXT",value.image));
		}
	) | (value=< INTEGER >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("INTEGER",value.image));
		}
	) | (value=< PAGES_V >
		{
		  jjtThis.jjtSetValue(value.image);
		  symbtab.put(value.image,new SymbolTable("PAGES_V",value.image));
		}
	)
	}

void Attribute():
{
}
{
  (
  		Field() Equal() Value()
  )
}


void CheckTree(SimpleNode n) #void:
{}
{    {
	if(n.jjtGetValue()!=null)	{		if(n.jjtGetValue().equals("article") || n.jjtGetValue().equals("book") || n.jjtGetValue().equals("booklet") ||
			n.jjtGetValue().equals("conference") || n.jjtGetValue().equals("inbook") || n.jjtGetValue().equals("incollection") ||
			n.jjtGetValue().equals("inproceedings") || n.jjtGetValue().equals("manual") || n.jjtGetValue().equals("masterthesis") ||
			n.jjtGetValue().equals("misc") || n.jjtGetValue().equals("phdthesis") || n.jjtGetValue().equals("proceedings") ||
			n.jjtGetValue().equals("techreport") || n.jjtGetValue().equals("unpublished"))			{
				tree.add(new Vector<Object >());
				tree.elementAt(currIndex).add(n.jjtGetValue());
				currIndex++;
			}
		else		{			tree.elementAt(currIndex-1).add(n.jjtGetValue());
		}
	}
    if (n.getChildren() != null) {
      for (int i = 0; i < n.getChildren().length; ++i) {
        SimpleNode auxn = (SimpleNode)n.jjtGetChild(i);
        if (auxn != null) {
         CheckTree(auxn);
        }
      }
    }
       
  }
}


void CheckSemantic() #void:
{}{
  {	for(int i = 0;i<tree.elementAt(0).size();i++)
		System.out.println(tree.elementAt(0).elementAt(i));
  }
  }
